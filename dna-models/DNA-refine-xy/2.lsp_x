// DNA Stack model

ctmc

// Parameters for stochastic rate constants
const double k_a = 0.2214e-5; 
const double k_bc = 0.2214e-5; 
const int N = 100;
const double Inv = 27100/N;

// Species start
module s
s : [0..N] init 0;
endmodule


// Species linker - start
module ls
ls : [0..N] init 0;
endmodule


// Species push
module p 
p : [0..N] init 4; 
// Reactant
[p_x] p > 0 -> p*Inv : (p'=p-1);
[x_p] p > 0 -> p*Inv : (p'=p-1);
[p_deg] p > 0 -> p*Inv : (p'=p-1);
[wSG_p] p > 0 -> p*Inv : (p'=p-1);
endmodule


// Species linker - start - push
module lsp 
lsp : [0..N] init 73;
// Reactant
[lsp_x] lsp > 0 -> lsp*Inv : (lsp'=lsp-1);
[lsp_deg] lsp > 0 -> lsp*Inv : (lsp'=lsp-1);
endmodule


// Species dataX
module x
x : [0..N] init 100; 
// Reactant
[p_x] x > 0 -> x*Inv : (x'=x-1);
[x_p] x > 0 -> x*Inv : (x'=x-1);
[lsp_x] x > 0 -> x*Inv : (x'=x-1);
[pSG_x] x > 0 -> x*Inv : (x'=x-1);
endmodule


// Species linker - start - push - dataX
module lspx
lspx : [0..N] init 0;
// Reactant
[lspx_deg] lspx > 0 -> lspx*Inv : (lspx'=lspx-1);
// Production
[lsp_x] lspx < N -> 1 : (lspx'=lspx+1);
endmodule



// Species push-sigma polymer 
module pSG 
pSG : [0..N] init 0;
// Reactant
[pSG_x] pSG > 0 -> pSG*Inv : (pSG'=pSG-1);
[pSG_deg] pSG > 0 -> pSG*Inv : (pSG'=pSG-1);
// Production
[p_x] pSG < N -> 1 : (pSG'=pSG+1);
[wSG_p] pSG < N -> 1 : (pSG'=pSG+1);
endmodule

// Species data-sigma polymer
module wSG 
wSG : [0..N] init 0;
// Reactant
[wSG_p] wSG > 0 -> wSG*Inv : (wSG'=wSG-1);	
[wSG_deg] wSG > 0 -> wSG*Inv : (wSG'=wSG-1);	
// Production
[x_p] wSG < N -> 1 : (wSG'=wSG+1);
[pSG_x] wSG < N -> 1 : (wSG'=wSG+1);
endmodule


// Reaction rates
module reaction_rates
[lsp_x] lsp*x > 0 -> k_bc / Inv : true;
[p_x] x*p > 0 -> k_a / Inv : true;
[x_p] x*p > 0 -> k_a / Inv : true;
[wSG_p] wSG*p > 0 -> k_bc / Inv : true; 
[pSG_x] pSG*x > 0 -> k_bc / Inv : true; 

[lsp_deg] lsp*wSG > 0 -> wSG*k_bc / Inv : true;
[lspx_deg] lspx*pSG > 0 | lspx*p>0 -> (p+pSG)*k_bc / Inv : true;
//[x_deg] pSG*x > 0 -> (pSG/(wSG+pSG)*wSG + pSG)*k_bc / Inv : true;

[wSG_deg] pSG*wSG > 0 | lsp*wSG>0 -> (pSG/(wSG+pSG)*(wSG + pSG) + lsp)*k_bc / Inv : true;
[pSG_deg] wSG*pSG > 0 | pSG *lspx>0 -> (wSG/(wSG+pSG)*(pSG + wSG) + lspx)*k_bc / Inv : true;
[p_deg] wSG*p*pSG > 0  -> (wSG/(wSG+pSG)*pSG)*k_bc/ Inv : true;
[p_deg] lspx*p>0 -> lspx*k_bc/ Inv : true;
endmodule