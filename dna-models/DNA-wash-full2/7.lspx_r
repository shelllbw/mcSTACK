// DNA Stack model

ctmc

// Parameters for stochastic rate constants
const double k_a = 0.2214e-5; 
const double k_bc = 0.2214e-5; 
const int N = 50;
const double Inv = 27100/N;


// Species start
module s
s : [0..N] init 0;
endmodule


// Species linker - start
module ls
ls : [0..N] init 0;
// Production
[lsp_q] ls < N -> 1 : (ls'=ls+1);
//[lspx_TAUr] ls < N -> 1 : (ls'=ls+1);
endmodule


// Species push
module p 
p : [0..N] init 0; 
endmodule


// Species linker - start - push
module lsp 
lsp : [0..N] init 0;
// Reactant
[lsp_q] lsp > 0 -> lsp*Inv : (lsp'=lsp-1);
// Production
[lspx_r] lsp < N -> 1 : (lsp'=lsp+1);
endmodule


// Species dataX
module x
x : [0..N] init 0; 
endmodule


// Species linker - start - push - dataX
module lspx
lspx : [0..N] init 0;
// Reactant
[lspx_r] lspx > 0 -> lspx*Inv : (lspx'=lspx-1);
//[lspx_TAUr] lspx > 0 -> lspx*Inv : (lspx'=lspx-1);
endmodule


// Species linker - start - sigma polymer
module lsSG
lsSG : [0..N] init 0;
// Production
endmodule


// Species push-sigma polymer 
module pSG 
pSG : [0..N] init 0;
endmodule


// Species data-sigma polymer
module wSG 
wSG : [0..N] init 0;
endmodule


// Species linker - start - push - dataX - push
module lspxp
lspxp : [0..N] init 0;
endmodule


// Species dataX
module y
y : [0..N] init 0; 
endmodule


// Species linker - start - push - dataX - push - dataY
module lspxpy
lspxpy : [0..N] init 0;
endmodule


// Species read
module r
r : [0..N] init 0;
// Reactant
[lspx_r] r > 0 -> r*Inv : (r'=r-1);
[r_q] r > 0 -> r*Inv : (r'=r-1);
[q_r] r > 0 -> r*Inv : (r'=r-1);
[r_deg] r > 0 -> r*Inv : (r'=r-1);
endmodule


// Species read - dataY
module ry
ry : [0..N] init 0;
endmodule


// Species read - dataX
module rx
rx : [0..N] init 0;
// Production
//[lspx_r] rx < N -> 1 : (rx'=rx+1);
//[lspx_TAUr] rx < N -> 1 : (rx'=rx+1);
endmodule

// Species pop
module q
q : [0..N] init 0;
// Reactant
[lsp_q] q > 0 -> q*Inv : (q'=q-1);
[r_q] q > 0 -> q*Inv : (q'=q-1);
[q_r] q > 0 -> q*Inv : (q'=q-1);
endmodule


// Species push - pop
module pq
pq : [0..N] init 0;
// Production
//[lsp_q] pq < N -> 1 : (pq'=pq+1);
//[lspx_TAUr] pq < N -> 1 : (pq'=pq+1);
endmodule


// Species polymer read-TAU
module TAUr
TAUr : [0..N] init 0;
// Reactant
[TAUr_q] TAUr > 0 -> TAUr*Inv : (TAUr'=TAUr-1);
[lspx_TAUr] TAUr > 0 -> TAUr*Inv : (TAUr'=TAUr-1);
// Production
[q_r] TAUr < N -> 1 : (TAUr'=TAUr+1);
[TAUq_r] TAUr < N -> 1 : (TAUr'=TAUr+1);
endmodule


// Species polymer pop-TAU
module TAUq
TAUq : [0..N] init 0;
// Reactant
[TAUq_r] TAUq > 0 -> TAUq*Inv : (TAUq'=TAUq-1);
// Production
[r_q] TAUq < N -> 1 : (TAUq'=TAUq+1);
[TAUr_q] TAUq < N -> 1 : (TAUq'=TAUq+1);
endmodule


// Reaction rates
module reaction_rates
[lspx_r] lspx*r > 0 -> k_a / Inv : true;
[lsp_q] lsp*q>0 -> k_bc / Inv : true;
[r_q] r*q > 0 -> k_a / Inv : true;
[q_r] r*q > 0 -> k_a / Inv : true;
[TAUr_q] TAUr*q > 0 | TAUr*TAUq > 0 -> (q + TAUq/(TAUq+TAUr)*TAUq)*k_bc / Inv : true; 
[TAUq_r] TAUq*r > 0 | TAUq*TAUr > 0 -> (r + TAUr/(TAUq+TAUr)*TAUr)*k_bc / Inv : true; 
[lspx_TAUr] lspx*TAUr > 0 -> k_a / Inv : true;
[r_deg] TAUq*r > 0 -> TAUq/(TAUq+TAUr)*(TAUr)*k_bc + TAUq*k_bc / Inv : true;
endmodule

